package br.com.wingene;

import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.drive.DriveScopes;
import com.google.api.services.sheets.v4.SheetsScopes;
import com.typesafe.config.ConfigException;
import com.typesafe.config.ConfigFactory;

public class GoogleApiBase {
	/** Application name. */
	public static final String APPLICATION_NAME = "Google API Client";

	/** Directory to store user credentials for this application. */
	// Estava antes como: System.getProperty("user.home")
	public static final java.io.File DATA_STORE_DIR = new java.io.File(
			getPathToAuthFiles(), ".credentials/sheets.googleapis.com");

	public static final java.io.File DATA_STORE_CLIENT_FILE = new java.io.File(
		getPathToAuthFiles(), "client_secret.json");

	/** Global instance of the {@linSk FileDataStoreFactory}. */
	public static FileDataStoreFactory DATA_STORE_FACTORY;

	/** Global instance of the JSON factory. */
	public static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();

	/** Global instance of the HTTP transport. */
	public static HttpTransport HTTP_TRANSPORT;
	/**
	 * Global instance of the scopes required.
	 *
	 * If modifying these scopes, delete the previously saved credentials at
	 * hadatac.google.config_dir ->
	 * .credentials/sheets.googleapis.com-java-quickstart
	 */
	public static final List<String> SCOPES = Arrays.asList(SheetsScopes.SPREADSHEETS, DriveScopes.DRIVE);

	static {
		try {
			HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
			DATA_STORE_FACTORY = new FileDataStoreFactory(DATA_STORE_DIR);
		} catch (Throwable t) {
			t.printStackTrace();
			System.exit(1);
		}
	}


	private static String getPathToAuthFiles() {
		try {
			return ConfigFactory.load().getString("google.config_dir");
		} catch (ConfigException e) {
			return ".";
		}
	}
	/**
	 * Creates an authorized Credential object.
	 * 
	 * @return an authorized Credential object.
	 * @throws IOException
	 */
	public static Credential authorize() throws IOException {

		// Load client secrets.
		// This file is generated by
		// https://developers.google.com/sheets/api/quickstart/java Step 1 or
		// https://console.developers.google.com/apis/credentials (Client Id)
		GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY,
				new FileReader(DATA_STORE_CLIENT_FILE));

		GoogleClientSecrets.Details details = clientSecrets.getInstalled();
		// For security reasons, if the client secret key is not in the
		// client_secret.json
		// file above, we set the secret key here.
		// TODO: Store this key in a safe place
		if (details.getClientSecret().equals("")) {
			details.setClientSecret("Bp_cSBBbP97K2otw_jPZurVs");
			clientSecrets.setInstalled(details);
		}
		// Build flow and trigger user authorization request.
		GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY,
				clientSecrets, SCOPES).setDataStoreFactory(DATA_STORE_FACTORY).setAccessType("offline").build();
		Credential credential = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
		// The API stores de credential on DATA_STORE_DIR.getAbsolutePath() and set
		// permission to access only to owner.
		return credential;
	}
	protected static HttpRequestInitializer setHttpTimeout(final HttpRequestInitializer requestInitializer) {
		return new HttpRequestInitializer() {
			@Override
			public void initialize(HttpRequest httpRequest) throws IOException {
				requestInitializer.initialize(httpRequest);
				httpRequest.setConnectTimeout(1 * 60000); // 1 minute connect timeout
				httpRequest.setReadTimeout(1 * 60000); // 1 minute read timeout
			}
		};
	}

}